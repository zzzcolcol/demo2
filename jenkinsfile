pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
                - name: jnlp
                  image: jenkins/inbound-agent
                  args: ["jenkins-agent"]
                  env:
                    - name: JENKINS_URL
                      value: "http://jenkins.jenkins.svc.cluster.local:8080/"
                  volumeMounts:
                    - name: workspace-volume
                      mountPath: /home/jenkins/agent
                  
                - name: docker
                  image: docker:20.10.23-dind
                  securityContext:
                    privileged: true
                  command:
                    - "dockerd"
                  args:
                    - "--host=unix:///var/run/docker.sock"
                    - "--tls=false"
                  tty: true
                  volumeMounts:
                    - name: docker-sock
                      mountPath: /var/run

                - name: aws-cli
                  image: amazon/aws-cli
                  command:
                    - "/bin/sh"
                  args:
                    - "-c"
                    - "while true; do sleep 3600; done"
                  tty: true

              volumes:
                - name: workspace-volume
                  emptyDir: {}
                - name: docker-sock
                  emptyDir: {}
            '''
        }
    }


    environment {
        AWS_ACCOUNT_ID = '120653558546'  // AWS 계정 ID
        AWS_REGION = 'ap-northeast-2'  // AWS 리전
        ECR_REPO = 'test/zzzcolcol'  // ECR 리포지토리 이름
        GIT_CREDENTIALS = 'github_token'  // Jenkins에 등록된 GitHub 인증 정보
        GIT_BRANCH = 'master'  // 빌드할 Git 브랜치
        GIT_REPO = 'https://github.com/zzzcolcol/demo2.git'  // GitHub Repository URL

        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"  // ECR 이미지 경로
        IMAGE_TAG = "latest"  // 기본적으로 latest 태그 사용
        K8S_NAMESPACE = 'default'  // Kubernetes 네임스페이스
        DEPLOYMENT_NAME = 'demo2'  // Kubernetes Deployment 
    }


        
    stages {
        stage('Setup Environment') {
            steps {
                sh 'aws --version'
                sh 'docker --version'
            }
        }
        stage('Wait for Agent') {
            steps {
                script {
                    retry(3) { // 3번까지 재시도
                        sleep(time: 10, unit: 'SECONDS')
                        sh 'echo "Checking Agent Availability"'
                    }
                }
            }
        }

        
        stage('Clone Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: GIT_CREDENTIALS,
                        url: GIT_REPO
                    ]]
                ])
            }
        }

        stage('Build & Test with Gradle') {
            steps {
                sh 'chmod +x ./gradlew'  // ✅ 실행 권한 부여
                sh './gradlew clean build -x test'  // ✅ Gradle 빌드 (테스트 제외)
            }
        }

        stage('Authenticate with AWS ECR') {
            steps {
                sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}"
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${ECR_REPO}:${IMAGE_TAG} .
                docker tag ${ECR_REPO}:${IMAGE_TAG} ${DOCKER_IMAGE}:${IMAGE_TAG}
                """
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                kubectl set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${DOCKER_IMAGE}:${IMAGE_TAG} --namespace=${K8S_NAMESPACE}
                kubectl rollout status deployment/${DEPLOYMENT_NAME} --namespace=${K8S_NAMESPACE}
                """
            }
        }
    }
}
