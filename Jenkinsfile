pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  # ‚úÖ 'volumes'ÏôÄ 'volumeMounts' Ï†úÍ±∞: Ï†ïÏ†Å Secret ÎåÄÏã† ÎèôÏ†ÅÏúºÎ°ú ÌÜ†ÌÅ∞ÏùÑ ÏÉùÏÑ±ÌïòÎØÄÎ°ú Îçî Ïù¥ÏÉÅ ÌïÑÏöî ÏóÜÏäµÎãàÎã§.
  containers:
  - name: gradle
    image: gradle:8.6.0-jdk17
    command: ['sleep']
    args: ['infinity']
  - name: kaniko
    # üí° Ï∞∏Í≥†: kaniko 'debug' Ïù¥ÎØ∏ÏßÄÎäî AWS CLIÎ•º Ìè¨Ìï®ÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏùºÎ∞ò 'executor' Ïù¥ÎØ∏ÏßÄÎäî Ìè¨Ìï®ÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
    image: gcr.io/kaniko-project/executor:debug
    command: ["sleep"]
    args: ["infinity"]
    env:
    - name: AWS_REGION
      value: ap-south-1
            '''
        }
    }

    environment {
        ECR_REPO = "120653558546.dkr.ecr.ap-south-1.amazonaws.com/my-app"
    }

    stages {
        stage('Gradle Build') {
            steps {
                container('gradle') {
                    // Git clone (Ï£ºÏùò: credentialsIdÎäî JenkinsÏóê Îì±Î°ùÎêú GitHub token IDÏó¨Ïïº Ìï®)
                    git url: 'https://github.com/zzzcolcol/demo2.git',
                        branch: 'master',
                        credentialsId: "test" // üëà Ïã§Ï†ú GitHub Credentials IDÎ°ú Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî.

                    script {
                        // Git ownership Ïò§Î•ò Î∞©ÏßÄ
                        sh 'git config --global --add safe.directory "${WORKSPACE}"'

                        // Git SHA Í∏∞Î∞ò ÌÉúÍ∑∏ ÏÉùÏÑ±
                        def gitSha = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        env.IMAGE_TAG = "v-${gitSha}"
                        env.IMAGE_FULL = "${env.ECR_REPO}:${env.IMAGE_TAG}"
                    }

                    // Gradle ÎπåÎìú
                    sh 'gradle clean bootJar -x test'
                    sh 'mv $(find build/libs -name "*.jar" | head -n 1) ./app.jar'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                container('kaniko') {
                    // ‚úÖ script Î∏îÎ°ùÏúºÎ°ú Í∞êÏã∏ÏÑú Groovy Î≥ÄÏàòÏôÄ Ïâò Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ìï®Íªò ÏÇ¨Ïö©Ìï©ÎãàÎã§.
                    script {
                        // ‚úÖ withAWSÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å AWS ÏûêÍ≤© Ï¶ùÎ™ÖÏùÑ Ï£ºÏûÖÌï©ÎãàÎã§.
                        withAWS(credentials: 'your-jenkins-aws-credentials-id', region: env.AWS_REGION) { // üëà Ïã§Ï†ú AWS Credentials IDÎ°ú Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî.

                            echo "üîÑ Getting a fresh ECR authentication token..."
                            // 1. ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ ÏãúÏ†êÏóê ÏÉàÎ°úÏö¥ ECR Ïù∏Ï¶ù ÌÜ†ÌÅ∞ÏùÑ ÎèôÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏ÏòµÎãàÎã§.
                            def ecrToken = sh(script: "aws ecr get-login-password --region ${env.AWS_REGION}", returnStdout: true).trim()
                            def ecrRegistry = "https://120653558546.dkr.ecr.ap-south-1.amazonaws.com"

                            echo "üîë Creating Kaniko config.json for ECR..."
                            // 2. KanikoÍ∞Ä ÏÇ¨Ïö©Ìï† Ïù∏Ï¶ù ÌååÏùº(config.json)ÏùÑ ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.
                            sh """
                            mkdir -p /kaniko/.docker
                            echo '{ "auths": { "${ecrRegistry}": { "username": "AWS", "password": "${ecrToken}" } } }' > /kaniko/.docker/config.json
                            """

                            echo "üî® Building & Pushing: ${env.IMAGE_FULL}"
                            // 3. ÏÉùÏÑ±Îêú Ïù∏Ï¶ù Ï†ïÎ≥¥Î°ú Kaniko ÎπåÎìú Î∞è Ìë∏ÏãúÎ•º Ïã§ÌñâÌï©ÎãàÎã§.
                            sh """
                            /kaniko/executor \\
                                --dockerfile=Dockerfile \\
                                --context=dir://${WORKSPACE} \\
                                --destination=${env.IMAGE_FULL} \\
                                --destination=${env.ECR_REPO}:latest \\
                                --insecure \\
                                --skip-tls-verify
                            """
                        }
                    }
                }
            }
            post {
                success {
                    echo "‚úÖ SUCCESS: Image pushed -> ${env.IMAGE_FULL}"
                }
                failure {
                    echo '‚ùå FAILURE: Docker Build & Push Ïã§Ìå®'
                }
            }
        }
    }
}