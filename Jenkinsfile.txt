pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  # ‚úÖ 1. Pod Identity(IRSA)ÏôÄ Ïó∞Í≤∞Îêú ÏÑúÎπÑÏä§ Í≥ÑÏ†ïÏùÑ ÏßÄÏ†ïÌï©ÎãàÎã§.
  serviceAccountName: jenkins-agent 
  containers:
  - name: gradle
    image: gradle:8.6.0-jdk17
    command: ['sleep']
    args: ['infinity']
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ["sleep"]
    args: ["infinity"]
# ‚ùå 2. aws-cli Ïª®ÌÖåÏù¥ÎÑàÏôÄ Í≥µÏú† Î≥ºÎ•®Ïù¥ Îçî Ïù¥ÏÉÅ ÌïÑÏöî ÏóÜÏúºÎØÄÎ°ú Ï†úÍ±∞ÌñàÏäµÎãàÎã§.
'''
        }
    }

    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO = "120653558546.dkr.ecr.${AWS_REGION}.amazonaws.com/my-app"
    }

    stages {
        stage('Gradle Build') {
            steps {
                container('gradle') {
                    git url: 'https://github.com/zzzcolcol/demo2.git',
                        branch: 'master',
                        credentialsId: "test"

                    script {
                        sh 'git config --global --add safe.directory "${WORKSPACE}"'
                        def gitSha = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        env.IMAGE_TAG = "v-${gitSha}"
                        env.IMAGE_FULL = "${env.ECR_REPO}:${env.IMAGE_TAG}"
                    }

                    sh 'gradle clean bootJar -x test'
                    sh 'mv $(find build/libs -name "*.jar" | head -n 1) ./app.jar'
                }
            }
        }
        
        // ‚úÖ 3. Docker Build & Push Îã®Í≥ÑÎ•º ÎåÄÌè≠ Í∞ÑÏÜåÌôîÌñàÏäµÎãàÎã§.
        stage('Docker Build & Push') {
            steps {
                container('kaniko') {
                    echo "üî® Building & Pushing image with Pod Identity..."
                    sh """
                    /kaniko/executor \\
                      --dockerfile=Dockerfile \\
                      --context=dir://${WORKSPACE} \\
                      --destination=${env.IMAGE_FULL}
                    """
                }
            }
            post {
                success {
                    echo "‚úÖ SUCCESS: Image pushed -> ${env.IMAGE_FULL}"
                }
                failure {
                    echo '‚ùå FAILURE: Docker Build & Push Ïã§Ìå®'
                }
            }
        }
    }
}